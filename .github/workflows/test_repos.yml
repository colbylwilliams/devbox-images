name: Build Images

concurrency: ${{ github.ref }}

on:
  workflow_dispatch:
  push:
    branches: [repos]
    # paths:
    #   - 'images/**'
    #   - 'scripts/**'

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      build: ${{ steps.images.outputs.build }}
      matrix: ${{ steps.images.outputs.matrix }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Image Definitions
        id: images
        uses: ./.github/actions/images

  build:
    needs: prepare
    runs-on: ubuntu-latest
    # continue-on-error: true

    # this is needed to avoid workflow errors in case of an empty matrix
    if: ${{ needs.prepare.outputs.build == 'true' }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      # - run: echo $FOO_BAR
      #   env:
      #     FOO_BAR: ${{ matrix.repos }}
      # FOO_BAR: ${{ toJSON(join(format( matrix.repos.*.cloneUrl, secrets[matrix.repos.*.secret]))) }}

      - shell: python
        run: |
          import json

          repos = json.loads('''${{env.REPOS}}''')
          for u in repos:
            print(u.cloneUrl)


          for u in ${{env.REPOS}}:
            print(u['cloneUrl'])
        env:
          REPOS: ${{ toJson(matrix.repos) }}

      # - name: Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Init Packer
  #       working-directory: ${{ matrix.source }}
  #       run: packer init .

  #     - name: Build Image with Packer
  #       working-directory: ${{ matrix.source }}
  #       run: |

  #         # run packer to build the image
  #         packer build -force \
  #           -var "branch=${{ github.ref }}" \
  #           -var "commit=${{ github.sha }}" \
  #           -var "galleryName=${{ matrix.galleryName }}" \
  #           -var "galleryResourceGroup=${{ matrix.galleryResourceGroup }}" \
  #           -var "image=${{ matrix.name }}" \
  #           -var 'replicaLocations=${{ matrix.locations }}' \
  #           -var "location=${{ matrix.location }}" \
  #           -var "tempResourceGroup=${{ matrix.tempResourceGroup }}" \
  #           -var "buildResourceGroup=${{ matrix.buildResourceGroup }}" \
  #           -var "resolvedResourceGroup=${{ matrix.resolvedResourceGroup }}" \
  #           -var "subscription=$(az account show --query 'id' -o tsv)" \
  #           -var "version=${{ matrix.version }}" \
  #           . # <== run in the current folder

  #         exit $?

  # cleanup:
  #   needs:
  #     - prepare
  #     - build
  #   runs-on: ubuntu-latest

  #   # this is needed to avoid workflow errors in case of an empty matrix
  #   if: always() && ${{ needs.prepare.outputs.build == 'true' }}

  #   strategy:
  #     matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

  #   steps:
  #     - name: Login to Azure
  #       if: ${{ matrix.tempResourceGroup != '' }}
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Delete Artifacts
  #       if: ${{ matrix.tempResourceGroup != '' }}
  #       run: az group delete -g "${{ matrix.tempResourceGroup }}" -y --no-wait || true
